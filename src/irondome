#!/bin/bash

# Configuration
LOGDIR="/var/log/irondome"
LOGFILE="$LOGDIR/irondome.log"
PIDDIR="/var/run/irondome"
SUBSCRIPT_DIR="./subscripts"
DEFAULT_PATH="/home"

mkdir -p "$LOGDIR" "$PIDDIR" "$SUBSCRIPT_DIR"
touch "$LOGFILE"

# Ensure all scripts in the subscript directory are executable
chmod +x "$SUBSCRIPT_DIR"/* 2>/dev/null

compile_c_program() {
  local c_file="$1"
  local bin_file="${c_file%.c}"  # Remove .c extension for output binary

  echo "Compiling $c_file -> $bin_file" | tee -a "$LOGFILE"
  if gcc "$c_file" -o "$bin_file"; then
    chmod +x "$bin_file"
    echo "Compilation successful: $bin_file" | tee -a "$LOGFILE"
  else
    echo "ERROR: Failed to compile $c_file" | tee -a "$LOGFILE"
    return 1
  fi
}

start_irondome() {
  MONITOR_PATHS=("$@")
  [ ${#MONITOR_PATHS[@]} -eq 0 ] && MONITOR_PATHS=("$DEFAULT_PATH")

  echo "Starting irondome... Monitoring: ${MONITOR_PATHS[*]}" | tee -a "$LOGFILE"

  # compile every C file in the subscript directory
  for script in "$SUBSCRIPT_DIR"/*; do
    if [[ -f "$script" ]]; then  # Ensure it's a file

        # if not C file continue
        if [[ "$script" != *.c ]]; then
            continue
        fi
        compile_c_program "$script" || continue  # Skip if compilation fails
    fi
  done

  for script in "$SUBSCRIPT_DIR"/*; do
    if [[ -f "$script" ]]; then  # Ensure it's a file

        if [[ "$script" == *.c ]]; then
            continue
        fi

      # Ensure the script or compiled binary is executable
      [[ -x "$script" ]] || continue

      echo "Starting $script..." | tee -a "$LOGFILE"

      script_name=$(basename "$script")
      script_pidfile="$PIDDIR/$script_name.pid"

      # Start each executable/script in the background with monitoring paths
      nohup "$script" "${MONITOR_PATHS[@]}" >> "$LOGFILE" 2>&1 &
      echo $! > "$script_pidfile"
      echo "$script_name started with PID $(cat "$script_pidfile"), monitoring: ${MONITOR_PATHS[*]}" | tee -a "$LOGFILE"
    fi
  done

  echo "All processes started. Logs: $LOGFILE"
}

stop_irondome() {
  echo "Stopping irondome..." | tee -a "$LOGFILE"

  for pidfile in "$PIDDIR"/*.pid; do
    [ -f "$pidfile" ] || continue
    pid=$(cat "$pidfile")

    if ps -p "$pid" > /dev/null; then
      echo "Stopping $pidfile process (PID $pid)..." | tee -a "$LOGFILE"
      kill "$pid" 2>/dev/null && rm -f "$pidfile"
    else
      echo "Removing stale PID file for $pidfile" | tee -a "$LOGFILE"
      rm -f "$pidfile"
    fi
  done

  echo "All processes stopped."
}

status_irondome() {
  echo "Checking irondome status..." | tee -a "$LOGFILE"

  for pidfile in "$PIDDIR"/*.pid; do
    [ -f "$pidfile" ] || continue
    pid=$(cat "$pidfile")
    script_name=$(basename "$pidfile" .pid)

    if ps -p "$pid" > /dev/null; then
      echo "$script_name: Running with PID $pid"
    else
      echo "$script_name: Not running (stale PID file)"
      rm -f "$pidfile"
    fi
  done
}

case "$1" in
  start) shift; start_irondome "$@" ;;
  stop) stop_irondome ;;
  status) status_irondome ;;
  restart)
    stop_irondome
    sleep 1
    shift
    start_irondome "$@"
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart} [paths to monitor]"
    echo "Example: $0 start /etc /var /usr"
    echo "(If no paths provided, defaults to $DEFAULT_PATH)"
    exit 1
    ;;
esac
